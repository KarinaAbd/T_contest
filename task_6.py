# 6 Физкультура

# На физкультуре происходит разбиение по двум командам.
# Ребята выстроены в шеренгу, у каждого из них есть свой рост a.
# Разбиение по командам произойдет по принципу «четный-нечетный»:
# все школьники с четным ростом отправляются в одну команду,
# а нечетные — в другую.
# В отличие от привычного урока, ребята не выстроились по росту.
# Теперь физрук Яша смотрит на шеренгу и думает
#  — может ли ровно одна пара учеников поменяться местами так,
# чтобы команды оказались такими же, как и по принципу «первый-второй».
# Иначе говоря, он хочет получить такой порядок,
# при котором все ученики с четным ростом стоят на четных позициях,
# а с нечетным — на нечетных.
# Помогите Яше найти нужную замену.

# Формат входных данных
# В первой строке находится число n(2≤n≤1000) — количество учеников в шеренге.
# В следующей строке находится n натуральных чисел (1≤a≤10^9) — рост учеников.

# Формат выходных данных
# В единственной строке выведите i и j — номера элементов,
# которые нужно поменять местами, чтобы добиться заданного условия.
# Если ответов несколько — разрешается вывести любой.
# Если не существует способа — выведите −1−1.


def find_rebase_indexes(quantity: int, heights: list) -> tuple:
    result = []

    for i in range(quantity):
        if i % 2 == 0:
            if heights[i] % 2 == 0:
                result.append(i + 1)
        else:
            if heights[i] % 2 != 0:
                result.append(i + 1)

    if len(result) == 2:
        result.sort()
        return tuple(result)
    return -1, -1


assert find_rebase_indexes(4, [2, 1, 4, 6]) == (-1, -1)
assert find_rebase_indexes(4, [2, 1, 3, 6]) == (1, 2)
assert find_rebase_indexes(2, [1, 2]) == (-1, -1)
assert find_rebase_indexes(2, [2, 1]) == (1, 2)
